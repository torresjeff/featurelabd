// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: featurelabd.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FeatureLabClient is the client API for FeatureLab service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeatureLabClient interface {
	GetTreatment(ctx context.Context, in *GetTreatmentRequest, opts ...grpc.CallOption) (*GetTreatmentResponse, error)
	FetchFeature(ctx context.Context, in *FetchFeatureRequest, opts ...grpc.CallOption) (*FetchFeatureResponse, error)
	FetchFeatures(ctx context.Context, in *FetchFeaturesRequest, opts ...grpc.CallOption) (*FetchFeaturesResponse, error)
}

type featureLabClient struct {
	cc grpc.ClientConnInterface
}

func NewFeatureLabClient(cc grpc.ClientConnInterface) FeatureLabClient {
	return &featureLabClient{cc}
}

func (c *featureLabClient) GetTreatment(ctx context.Context, in *GetTreatmentRequest, opts ...grpc.CallOption) (*GetTreatmentResponse, error) {
	out := new(GetTreatmentResponse)
	err := c.cc.Invoke(ctx, "/pb.FeatureLab/GetTreatment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureLabClient) FetchFeature(ctx context.Context, in *FetchFeatureRequest, opts ...grpc.CallOption) (*FetchFeatureResponse, error) {
	out := new(FetchFeatureResponse)
	err := c.cc.Invoke(ctx, "/pb.FeatureLab/FetchFeature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureLabClient) FetchFeatures(ctx context.Context, in *FetchFeaturesRequest, opts ...grpc.CallOption) (*FetchFeaturesResponse, error) {
	out := new(FetchFeaturesResponse)
	err := c.cc.Invoke(ctx, "/pb.FeatureLab/FetchFeatures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeatureLabServer is the server API for FeatureLab service.
// All implementations must embed UnimplementedFeatureLabServer
// for forward compatibility
type FeatureLabServer interface {
	GetTreatment(context.Context, *GetTreatmentRequest) (*GetTreatmentResponse, error)
	FetchFeature(context.Context, *FetchFeatureRequest) (*FetchFeatureResponse, error)
	FetchFeatures(context.Context, *FetchFeaturesRequest) (*FetchFeaturesResponse, error)
	mustEmbedUnimplementedFeatureLabServer()
}

// UnimplementedFeatureLabServer must be embedded to have forward compatible implementations.
type UnimplementedFeatureLabServer struct {
}

func (UnimplementedFeatureLabServer) GetTreatment(context.Context, *GetTreatmentRequest) (*GetTreatmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTreatment not implemented")
}
func (UnimplementedFeatureLabServer) FetchFeature(context.Context, *FetchFeatureRequest) (*FetchFeatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchFeature not implemented")
}
func (UnimplementedFeatureLabServer) FetchFeatures(context.Context, *FetchFeaturesRequest) (*FetchFeaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchFeatures not implemented")
}
func (UnimplementedFeatureLabServer) mustEmbedUnimplementedFeatureLabServer() {}

// UnsafeFeatureLabServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeatureLabServer will
// result in compilation errors.
type UnsafeFeatureLabServer interface {
	mustEmbedUnimplementedFeatureLabServer()
}

func RegisterFeatureLabServer(s grpc.ServiceRegistrar, srv FeatureLabServer) {
	s.RegisterService(&FeatureLab_ServiceDesc, srv)
}

func _FeatureLab_GetTreatment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTreatmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureLabServer).GetTreatment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FeatureLab/GetTreatment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureLabServer).GetTreatment(ctx, req.(*GetTreatmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureLab_FetchFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchFeatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureLabServer).FetchFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FeatureLab/FetchFeature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureLabServer).FetchFeature(ctx, req.(*FetchFeatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureLab_FetchFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchFeaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureLabServer).FetchFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FeatureLab/FetchFeatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureLabServer).FetchFeatures(ctx, req.(*FetchFeaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FeatureLab_ServiceDesc is the grpc.ServiceDesc for FeatureLab service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeatureLab_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.FeatureLab",
	HandlerType: (*FeatureLabServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTreatment",
			Handler:    _FeatureLab_GetTreatment_Handler,
		},
		{
			MethodName: "FetchFeature",
			Handler:    _FeatureLab_FetchFeature_Handler,
		},
		{
			MethodName: "FetchFeatures",
			Handler:    _FeatureLab_FetchFeatures_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "featurelabd.proto",
}
